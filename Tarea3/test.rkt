#lang play
(require "T3.rkt")

(print-only-errors #t)

;; P1.b)

(test (parse '1) (num 1))
(test (parse '(nil)) (nil))
(test (parse '{+ 1 2}) (add (num 1) (num 2)))
(test (parse '{+ 3 {+ 5 6}}) (add (num 3) (add (num 5) (num 6))))
(test (parse '{cons 1 3}) (conz (num 1) (num 3)))
(test (parse '{cons 2 {+ 1 1}}) (conz (num 2) (add (num 1) (num 1))))
(test (parse '{cons {+ 0 1} {nil}}) (conz (add (num 0) (num 1)) (nil)))
(test (parse '{list 1 2 3}) (conz (num 1) (conz (num 2) (conz (num 3) (nil)))))
(test (parse '{list (cons 1 2) 3 {+ 2 2}}) (conz (conz (num 1) (num 2)) (conz (num 3) (conz (add (num 2) (num 2)) (nil)))))
(test (parse '{list {list 1 2} 3}) (conz (conz (num 1) (conz (num 2) (nil))) (conz (num 3) (nil))))

;; P1.d)
(test (parse-pattern '3) (numP 3))
(test (parse-pattern '(nil)) (nilP))
(test (parse-pattern 'x) (varP 'x))
(test (parse-pattern '(cons 1 x)) (conzP (numP 1) (varP 'x)))
(test (parse-pattern '(list 1 x 3)) (conzP (numP 1) (conzP (varP 'x) (conzP (numP 3) (nilP)))))
(test (parse-pattern '(cons (cons 1 2) (cons (nil) v))) (conzP (conzP (numP 1) (numP 2)) (conzP (nilP) (varP 'v))))
(test (parse-pattern '(list 1 (cons 2 3) (cons (nil) t) (list 1 2))) (conzP (numP 1) (conzP (conzP (numP 2) (numP 3)) (conzP (conzP (nilP) (varP 't)) (conzP (conzP (numP 1) (conzP (numP 2) (nilP))) (nilP))))))

;; P1.e)
(test (parse '{fun x x}) (fun (varP 'x) (id 'x)))
(test (parse '{fun (cons x xs) x}) (fun (conzP (varP 'x) (varP 'xs)) (id 'x)))
(test (parse '{f x}) (app (id 'f) (id 'x)))
(test (parse '{fun x (cons (nil) {+ x 2})}) (fun (varP 'x) (conz (nil) (add (id 'x) (num 2)))))
(test (parse '{fun (list x y 1) (cons x y)}) (fun (conzP (varP 'x) (conzP (varP 'y) (conzP (numP 1) (nilP)))) (conz (id 'x) (id 'y))))

;; P1.g)
(test (generate-substs (nilP) (nilV)) (success '()))
(test (generate-substs (numP 5) (numV 5)) (success '()))
(test (generate-substs (numP 5) (numV 8)) (failure "MatchError: given number does not match pattern"))
(test (generate-substs (numP 5) (nilV)) (failure "MatchError: expected a number"))
(test (generate-substs (nilP) (numV 3)) (failure "MatchError: expected a nil"))
(test (generate-substs (conzP (numP 4) (nilP)) (numV 3)) (failure "MatchError: expected a cons constructor"))
(test (generate-substs (conzP (numP 4) (nilP)) (conzV (numV 5) (nilV))) (failure "MatchError: given number does not match pattern"))
(test (generate-substs (conzP (numP 4) (nilP)) (conzV (numV 4) (nilV))) (success '()))
(test (generate-substs (varP 'x) (numV 3)) (success (list (cons 'x (numV 3)))))
(test (generate-substs (varP 'y) (conzV (numV 4) (nilV))) (success (list (cons 'y (conzV (numV 4) (nilV))))))
(test (generate-substs (varP 'z) (nilV)) (success (list (cons 'z (nilV)))))
(test (generate-substs (conzP (varP 'x) (varP 'y)) (conzV (numV 1) (numV 2))) (success (list (cons 'x (numV 1)) (cons 'y (numV 2)))))
(test (generate-substs (conzP (varP 'x) (varP 'y)) (conzV (numV 1) (nilV))) (success (list (cons 'x (numV 1)) (cons 'y (nilV)))))
(test (generate-substs (conzP (varP 'x) (conzP (varP 'y) (varP 'z))) (conzV (numV 1) (conzV (numV 2) (numV 3)))) (success (list (cons 'x (numV 1)) (cons 'y (numV 2)) (cons 'z (numV 3)))))

;; P1.h)
(test (interp (num 7) empty-env) (numV 7))
(test (interp (add (num 1) (num 2)) empty-env) (numV 3))
(test (interp (nil) empty-env) (nilV))
(test (interp (conz (num 8) (num 1)) empty-env) (conzV (numV 8) (numV 1)))
(test (interp (add (num 3) (add (num 1) (num 3))) empty-env) (numV 7))
(test (interp (conz (nil) (add (num 10) (num -3))) empty-env) (conzV (nilV) (numV 7)))
(test/exn (interp (add (num 7) (id 'c)) empty-env) (error 'interp "LookupError: variable c not found"))

(define func1 (fun (varP 'x) (id 'x)))
(define func2 (fun (varP 'x) (add (id 'x) (num 5))))
(define func3 (fun (nilP) (conz (nil) (num 7))))
(define func4 (fun (conzP (varP 'x) (varP 'y)) (add (id 'x) (id 'y))))
(define func5 (fun (numP 3) (num 3)))
(define func6 (fun (conzP (varP 'x) (numP 2)) (num 1)))
(define func7 (parse '{fun (list 1 2) 3}))

(test/exn (interp (app func1 (id 'z)) empty-env) (error 'interp "LookupError: variable z not found"))
(test (interp (app func1 (num 4)) empty-env) (numV 4))
(test (interp (app func1 (conz (num 5) (num 6))) empty-env) (conzV (numV 5) (numV 6)))
(test (interp (app func2 (num 4)) empty-env) (numV 9))
(test (interp (app func3 (nil)) empty-env) (conzV (nilV) (numV 7)))
(test (interp (app func3 (num 4)) empty-env) (failure "MatchError: expected a nil"))
(test (interp (app func4 (conz (num 7) (num 4))) empty-env) (numV 11))
(test (interp (app func4 (nil)) empty-env) (failure "MatchError: expected a cons constructor"))
(test (interp (app func5 (num 3)) empty-env) (numV 3))
(test (interp (app func5 (num 4)) empty-env) (failure "MatchError: given number does not match pattern"))
(test (interp (app func6 (conz (num 3) (num 2))) empty-env) (numV 1))
(test (interp (app func6 (conz (num 3) (nil))) empty-env) (failure "MatchError: expected a number"))
(test (interp (app func7 (conz (num 1) (num 2))) empty-env) (failure "MatchError: expected a cons constructor"))
(test (interp (app func7 (conz (num 1) (num 3))) empty-env) (failure "MatchError: expected a cons constructor"))
(test (interp (app func7 (conz (num 1) (conz (num 3) (nil)))) empty-env) (failure "MatchError: given number does not match pattern"))
(test (interp (app func7 (conz (num 1) (conz (num 2) (nil)))) empty-env) (numV 3))

;; P2.b)
(test (parse '{match 2 [1 1] [x 3]}) (pmatch (num 2) (list (cons (numP 1) (num 1)) (cons (varP 'x) (num 3)))))
(test (parse '{match x [(cons 1 2) (cons 2 4)]}) (pmatch (id 'x) (list (cons (conzP (numP 1) (numP 2)) (conz (num 2) (num 4))))))
(test (parse '{match 1 [(nil) 1] [2 (nil)]}) (pmatch (num 1) (list (cons (nilP) (num 1)) (cons (numP 2) (nil)))))
(test/exn (parse '{match (list 1 2 3)}) (error "SyntaxError: match expression must have at least one case"))
(test (parse '{match 2 [1 2] [3 4] [2 (match 1 [2 1] [1 (cons 1 2)])]}) (pmatch (num 2) (list (cons (numP 1) (num 2)) (cons (numP 3) (num 4)) (cons (numP 2) (pmatch (num 1) (list (cons (numP 2) (num 1)) (cons (numP 1) (conz (num 1) (num 2)))))))))
(test (parse '{match (nil) [1 2] [(nil) (nil)]}) (pmatch (nil) (list (cons (numP 1) (num 2)) (cons (nilP) (nil)))))
(test (parse '{match (list 1 2) [(nil) 3]}) (pmatch (conz (num 1) (conz (num 2) (nil))) (list (cons (nilP) (num 3)))))

;; P3.b)
(test (interp (pmatch (num 2) (list (cons (numP 3) (num 4)) (cons (numP 2) (num 5)))) empty-env) (numV 5))
(test (interp (pmatch (conz (num 2) (nil)) (list (cons (conzP (numP 2) (nilP)) (num 4)) (cons (nilP) (num 5)))) empty-env) (numV 4))
(test (interp (parse '{match 2 [1 2] [3 4] [2 (match 1 [2 1] [1 (cons 1 2)])]}) empty-env) (conzV (numV 1) (numV 2)))
(test/exn (interp (parse '{match 2 [1 2] [3 4]}) empty-env) (error "MatchError: expression does not match any pattern"))
(test/exn (interp (parse '{match 2 [1 2] [3 4] [2 (match 1 [2 1] [3 (cons 1 2)])]}) empty-env) (error "MatchError: expression does not match any pattern"))
(test (interp (parse '{match (nil) [1 4] [x 7] [nil 4]}) empty-env) (numV 7))